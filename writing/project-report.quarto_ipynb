{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Premier League Causal Analysis Report\"\n",
        "format: gfm\n",
        "---\n",
        "\n",
        "\n",
        "## Description\n",
        "\n",
        "This project aims to analyze the causal impact of coaching changes on team performances during the 2023-2024 Premier League Season. Using a dataset of match outcomes and coaching history, the analysis leverages regression techniques to infer causality.\n",
        "\n",
        "---\n",
        "\n",
        "## The Story\n",
        "\n",
        "This project investigates the impact of mid-season head coaching changes on team performance in the 2023–2024 Premier League season. Coaching changes are often made in response to underperformance, but it’s unclear whether they lead to measurable improvements in outcomes like win percentage or league ranking.\n",
        "\n",
        "The goal of this project is to analyze whether coaching changes improve team performance and evaluate the extent of their impact. The findings will provide insights into whether these changes justify their cost and strategic importance.\n",
        "\n",
        "---\n",
        "\n",
        "## Ideal Dataset\n",
        "\n",
        "The analysis uses the following data:\n",
        "\n",
        "1. **Match Outcomes**: Match dates, results, scores, and home/away teams.\n",
        "2. **Coaching Changes**: A table of head coaching changes with start and end dates.\n",
        "3. **Additional Variables**:\n",
        "   - **Team Strength**: Metrics like squad value or past performance.\n",
        "   - **Opponent Strength**: League ranking or historical performance of opposing teams.\n",
        "   - **Match Context**: Home vs. away games and timing relative to the coaching change.\n",
        "\n",
        "---\n",
        "\n",
        "## Factors Affecting Outcomes\n",
        "\n",
        "Performance is influenced by several factors:\n",
        "\n",
        "- **Strategic Leadership**: New coaches may bring different tactics or motivational strategies.\n",
        "- **Team Dynamics**: Changes may disrupt or improve the team’s cohesion.\n",
        "- **Timing**: Early-season changes allow time for recovery, while late-season changes are often last-resort measures.\n",
        "- **Player Quality**: The adaptability and skill of the players affects results.\n",
        "- **Opponent Strength**: Performance depends on the difficulty of the opposing teams.\n",
        "\n",
        "---\n",
        "\n",
        "## Addressing Feedback\n",
        "\n",
        "- **What do you mean by coaching changes?**  \n",
        "  Coaching changes refer to replacements of head coaches during the season. This analysis focuses only on head coaching changes for clarity and feasibility.\n",
        "\n",
        "- **How often do coaching changes occur during a season?**  \n",
        "  In the 2023–2024 Premier League season, there were approximately 7–10 mid-season head coaching changes.\n",
        "\n",
        "- **What’s the business angle?**  \n",
        "  Coaching changes impact financial metrics like sponsorships, ticket sales, and avoiding relegation, which has major monetary implications.\n",
        "\n",
        "- **Have you found relevant data?**  \n",
        "  Yes, the analysis uses a Kaggle dataset for 2023–2024 Premier League matches, supplemented with coaching change data manually compiled from public records.\n",
        "\n",
        "- **What would the outcome be?**  \n",
        "  Key outcomes include:\n",
        "  - **Win Percentage**: Improvement in match win rates after a coaching change.\n",
        "  - **Goal Differential**: Changes in scoring and defensive performance.\n",
        "  - **League Ranking**: Shifts in table position after coaching changes.\n",
        "\n",
        "- **Other Variables to Include?**  \n",
        "  - Team and opponent strength.\n",
        "  - Match location (home vs. away).\n",
        "  - Timing of coaching changes (early vs. late season).\n",
        "\n",
        "---\n",
        "\n",
        "## Theory\n",
        "\n",
        "Coaching changes are typically a response to poor results. This project examines whether these changes improve team performance or if outcomes are primarily driven by other factors, such as team quality or opponent difficulty. By controlling for these variables, the analysis aims to estimate the true impact of coaching changes.\n",
        "\n",
        "---\n",
        "\n",
        "## DAG\n",
        "\n",
        "![](..figures/UpdatedDag.png){fig-align=\"center\"}\n",
        "\n",
        "---\n",
        "\n",
        "## Identification Strategy\n",
        "\n",
        "### Where We Started\n",
        "The objective of this project is to analyze the causal impact of coaching changes on team performance in the Premier League, using **Points** as the outcome variable. Points are calculated as **3 for a win, 1 for a draw, and 0 for a loss**. Our initial focus was on identifying key variables and their relationships, as represented in the DAG, to develop a strategy for isolating the causal effect of coaching changes.\n",
        "\n",
        "### Where We Are Going\n",
        "The goal of this milestone is to specify an identification strategy that ensures:\n",
        "- Key confounding variables are included to satisfy the **backdoor criterion**.\n",
        "- Irrelevant variables are excluded to streamline the model.\n",
        "- Decisions are based on sound **causal assumptions** supported by the DAG.\n",
        "\n",
        "### Variables to Include Based on the DAG\n",
        "- **Team Strength**: Captures the quality of the team, which influences both the likelihood of a coaching change and performance outcomes.\n",
        "- **Opponent Strength**: Reflects the difficulty of the opposing team, which impacts match outcomes and adjusts for match context.\n",
        "- **Match Location**: Accounts for the home or away setting, which influences team performance.\n",
        "- **Date**: Controls for temporal trends and seasonality, such as early-season vs. late-season effects.\n",
        "\n",
        "### Variables to Exclude Based on the DAG\n",
        "- **Start_Date and End_Date**: These are part of the treatment definition (coaching change) and should not be conditioned on directly.\n",
        "- **HomeTeam and AwayTeam**: Team identity is indirectly captured by **Team Strength**.\n",
        "- **Points**: As the outcome variable, it should not be conditioned on.\n",
        "\n",
        "---\n"
      ],
      "id": "78aa429f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## Simulation\n",
        "\n",
        "import numpy as np\n",
        "import polars as pl\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "# True parameter values\n",
        "beta0 = 3   # Intercept\n",
        "beta1 = 2   # Effect of CoachChange\n",
        "beta2 = 5   # Effect of Team_Strength\n",
        "beta3 = -3  # Effect of Opponent_Strength\n",
        "beta4 = 1   # Effect of Match_Location\n",
        "n = 1000    # Sample size\n",
        "noise_sd = 2  # Standard deviation of random noise\n",
        "\n",
        "# Simulate predictors directly\n",
        "sim_data = pl.DataFrame({\n",
        "    \"CoachChange\": np.random.choice([0, 1], size=n), \n",
        "    \"Team_Strength\": np.random.uniform(50, 100, size=n),\n",
        "    \"Opponent_Strength\": np.random.uniform(50, 100, size=n),\n",
        "    \"Match_Location\": np.random.choice([0, 1], size=n)\n",
        "})\n",
        "\n",
        "# Simulate the outcome variable (Points) directly\n",
        "sim_data = sim_data.with_columns([\n",
        "    (\n",
        "        beta0\n",
        "        + beta1 * pl.col(\"CoachChange\")\n",
        "        + beta2 * pl.col(\"Team_Strength\")\n",
        "        + beta3 * pl.col(\"Opponent_Strength\")\n",
        "        + beta4 * pl.col(\"Match_Location\")\n",
        "        + np.random.normal(0, noise_sd, size=n)\n",
        "    ).alias(\"Points\")\n",
        "])\n",
        "\n",
        "# Prepare the data for regression\n",
        "X = sim_data.select([\"CoachChange\", \"Team_Strength\", \"Opponent_Strength\", \"Match_Location\"]).to_numpy()\n",
        "y = sim_data[\"Points\"].to_numpy()\n",
        "\n",
        "# Fit the linear model\n",
        "model = LinearRegression(fit_intercept=True)\n",
        "model.fit(X, y)\n",
        "\n",
        "# Print the coefficients\n",
        "print(f\"Intercept: {model.intercept_}\")\n",
        "print(f\"Coefficients: {model.coef_}\")\n",
        "\n",
        "# Compare to true parameter values\n",
        "print(f\"True Intercept: {beta0}\")\n",
        "print(f\"True Coefficients: {beta1}, {beta2}, {beta3}, {beta4}\")"
      ],
      "id": "5516b43b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n"
      ],
      "id": "b772d989"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# EDA\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "file_path = \"/Users/alesandro/Downloads/matches_corrected.csv\"\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "### BASIC DATA CHECKS ###\n",
        "Display basic info\n",
        "print(\"Dataset Info:\")\n",
        "df.info()\n",
        "\n",
        "Display first few rows\n",
        "print(\"\\nFirst 5 Rows:\")\n",
        "print(df.head())\n",
        "\n",
        "Check for missing values\n",
        "print(\"\\nMissing Values:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "Summary statistics\n",
        "print(\"\\nSummary Statistics:\")\n",
        "print(df.describe())"
      ],
      "id": "f99b3214",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "### DISTRIBUTION PLOTS ###\n",
        "Points Distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df[\"Points\"], bins=3, kde=True)\n",
        "plt.title(\"Distribution of Points\")\n",
        "plt.xlabel(\"Points\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "Team Strength Distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df[\"Team_Strength\"], bins=20, kde=True)\n",
        "plt.title(\"Distribution of Team Strength\")\n",
        "plt.xlabel(\"Squad Value (£M)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "Opponent Strength Distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df[\"Opponent_Strength\"], bins=20, kde=True)\n",
        "plt.title(\"Distribution of Opponent Strength\")\n",
        "plt.xlabel(\"Squad Value (M)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "### CORRELATION ANALYSIS ###\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(df[[\"Points\", \"Team_Strength\", \"Opponent_Strength\", \"CoachChange\"]].corr(), annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Heatmap\")\n",
        "plt.show()\n",
        "\n",
        "### CATEGORICAL ANALYSIS ###\n",
        "Countplot for Coaching Changes\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.countplot(x=\"CoachChange\", data=df, palette=\"Set2\")\n",
        "plt.title(\"Distribution of Coaching Changes\")\n",
        "plt.xlabel(\"Coach Change (0 = No, 1 = Yes)\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n",
        "\n",
        "Points by Change Timing\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.boxplot(x=\"Change_Timing\", y=\"Points\", data=df, palette=\"Set1\")\n",
        "plt.title(\"Points Distribution by Change Timing\")\n",
        "plt.xlabel(\"Change Timing\")\n",
        "plt.ylabel(\"Points Earned\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "id": "47eebce8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](..figures/distribution_of_points.png){fig-align=\"center\"}\n",
        "![](..figures/distribution_of_team_strength.png){fig-align=\"center\"}\n",
        "![](..figures/distribution_of_opponent_strength.png){fig-align=\"center\"}\n",
        "![](..figures/correlation_heatmap.png){fig-align=\"center\"}\n",
        "![](..figures/distribution_of_coaching_changes.png){fig-align=\"center\"}\n",
        "![](..figures/point_dist_by_change.png){fig-align=\"center\"}\n",
        "\n",
        "- The **points distribution** confirms the expected trimodal pattern (0, 1, and 3 points), which aligns with how points are awarded in the Premier League.\n",
        "\n",
        "- **Team strength and opponent strength distributions** show a right-skewed pattern, meaning a few teams have significantly higher squad values. Most teams fall within a mid-range, which supports using squad value as a proxy for team quality.\n",
        "\n",
        "- The **correlation heatmap** suggests that team strength has a moderate positive correlation (~0.20) with points, meaning stronger teams tend to perform better. Opponent strength has a negative correlation (~-0.28) with points, indicating tougher opponents make it harder to earn points. CoachChange has a weak negative correlation (~-0.10) with points, suggesting that a coaching change alone does not dramatically impact performance.\n",
        "\n",
        "- The **distribution of coaching changes** shows that most matches occurred without a coaching change (~500), while ~300 had a coaching change beforehand. This highlights that coaching changes are relatively rare in the dataset.\n",
        "\n",
        "- The **points distribution by change timing** suggests that teams making mid-season coaching changes tend to perform worse, with a lower median number of points. Before-season and late-season changes appear to have a more balanced performance distribution.\n",
        "\n",
        "- Overall, the data indicates that team and opponent strength are stronger predictors of performance than coaching changes. Coaching changes may be a response to poor performance rather than a true intervention that improves outcomes.\n",
        "\n",
        "---\n",
        "\n",
        "## Estimate Causal Effect"
      ],
      "id": "25ee7283"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import pymc as pm\n",
        "import arviz as az\n",
        "\n",
        "# Load dataset\n",
        "df = pd.read_csv(\"/Users/alesandro/Downloads/matches_corrected.csv\")\n",
        "\n",
        "# Convert 'Venue' to numeric (1 for Home, 0 for Away)\n",
        "df[\"Venue\"] = df[\"Venue\"].map({\"Home\": 1, \"Away\": 0})\n",
        "\n",
        "# Prepare data (predictors and outcome)\n",
        "X = df[[\"CoachChange\", \"Team_Strength\", \"Opponent_Strength\", \"Venue\"]].to_numpy()\n",
        "y = df[\"Points\"].to_numpy()\n",
        "\n",
        "# Bayesian model\n",
        "with pm.Model() as coaching_model:\n",
        "    # Data containers\n",
        "    X_data = pm.Data(\"X_data\", X)\n",
        "    y_data = pm.Data(\"y_data\", y)\n",
        "\n",
        "    # Priors\n",
        "    alpha = pm.Normal(\"alpha\", mu=0, sigma=1)  # Intercept\n",
        "    beta = pm.Normal(\"beta\", mu=0, sigma=1, shape=4)  # One for each predictor\n",
        "    sigma = pm.Exponential(\"sigma\", lam=1)  # Standard deviation of error term\n",
        "\n",
        "    # Likelihood\n",
        "    mu = alpha + pm.math.dot(X_data, beta)\n",
        "    y_obs = pm.Normal(\"y_obs\", mu=mu, sigma=sigma, observed=y_data)\n",
        "\n",
        "    # Sample from the posterior\n",
        "    idata = pm.sample(1000, tune=1000, return_inferencedata=True)\n",
        "\n",
        "# Summarize posterior estimates\n",
        "summary = az.summary(idata, round_to=2)\n",
        "print(summary)\n",
        "\n",
        "# Visualize posterior distributions\n",
        "az.plot_trace(idata, combined=True)"
      ],
      "id": "8c40704f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Intermediate Slide Presentation\n",
        "See my intermediate presentation [slides]https://github.com/Alesandro-Rodriguez/is5150-ar/blob/main/presentations/intermediate-presentation.html"
      ],
      "id": "c4f530e8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/alesandro/.pyenv/versions/3.12.4/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}