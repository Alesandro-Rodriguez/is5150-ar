---
title: "Premier League Coaching Changes: Causal Inference Project"
author: "Alesandro Rodriguez"
format: revealjs
---

## Introduction

- **Objective**: Analyze the causal impact of coaching changes on team performance during the 2023-2024 Premier League season.
- **Approach**: Use match outcomes, coaching history, and regression techniques to infer causality.

---

## Background Info

Why this project?

---

## The Research Question

- Do mid-season coaching changes improve team performance?
- Are coaching changes a reactive measure to underperformance or a strategic performance booster?
- What role do team strength and opponent strength play?

---

## Data Sources

- **Match Outcomes**: Dates, results, goals scored, match location.
- **Coaching Changes**: Coaching transitions across the season.
- **Additional Factors**:
  - **Team Strength**: Squad market value.
  - **Opponent Strength**: Opposing team's squad value.
  - **Match Context**: Home vs. away games and timing relative to the coaching change.

---

## DAG (Causal Model)

figure out how to show image again...

---

## Identification Strategy

- **Outcome Variable**: Points (3 for a win, 1 for a draw, 0 for a loss)
- **Key Adjustment Variables**:
  - Team_Strength (Squad value)
  - Opponent_Strength (Strength of opposing team)
  - Match_Location (Home vs. away)
- **Exclusions**: Start_Date, End_Date, HomeTeam, AwayTeam

---

## Simulated Data (maybe we will include)

import numpy as np
import polars as pl

np.random.seed(42)

beta0, beta1, beta2, beta3, beta4 = 3, 2, 5, -3, 1
n = 1000
noise_sd = 2

sim_data = (
    pl.DataFrame({
        "CoachChange": np.random.choice([0, 1], size=n),
        "Opponent_Strength": np.random.uniform(50, 100, size=n),
        "Match_Location": np.random.choice([0, 1], size=n)
    })
    .with_columns([
        (beta0 + beta1 * pl.col("CoachChange") + np.random.normal(0, noise_sd, size=n)).alias("Team_Strength")
    ])
    .with_columns([
        (beta2 * pl.col("Team_Strength") + beta3 * pl.col("Opponent_Strength") + beta4 * pl.col("Match_Location") + np.random.normal(0, noise_sd, size=n)).alias("Points")
    ])
)
